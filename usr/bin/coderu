#!/bin/bash

# Version: 0.7 (24.10.2010)

# Load settings from configuration file
. /usr/etc/coderu/coderu.cfg

# Functions
function colorText {
    local text="$1"
    local color="$2"
    
    if [ $Colorblind -eq 1 ]
    then
        color="\E[1m";
    else
        case "$color" in
            "black")   color="\E[30m";;
            "red")     color="\E[31m";;
            "green")   color="\E[32m";;
            "yellow")  color="\E[33m";;
            "blue")    color="\E[34m";;
            "magenta") color="\E[35m";;
            "cyan")    color="\E[36m";;
            "white")   color="\E[37m";;
        esac
    fi

    echo "$color$text\E[0m"
}

function removeSurroundingSpaces {
    local result="$1"
    result=${result##" "}
    result=${result%%" "}
    echo "$result"
}

function stripColorTags {
    local result="$1"
    local regex='.*(\\E\[[0-9][0-9]?;?[0-9]?[0-9]?m).*'
    
    while [[ "$result" =~ $regex ]]
    do
        result=${result//"${BASH_REMATCH[1]}"/}
    done

    echo "$result"
}

function strLen {
    local str=`stripColorTags "$1"`
    echo $[${#str}-1]
}

function printTableHeader {
    local cCount=$#
    local columns=$@
    local cName=""
    local cWidth=0
    local tWidth=0
    local cIndex=0

    for column in $columns
    do
        local index=$[`expr index "$column" ":"`-1]
        cName=${column:0:index}
        cWidth=${column#"$cName:"}
        tWidth=$[$tWidth+$cWidth]
    done
    tWidth=$[$tWidth+$cCount+1]
    
    repeat "-" $tWidth
    echo
    
    echo -n "|"
    for column in $columns
    do
        local index=$[`expr index "$column" ":"`-1]
        cName=${column:0:index}
        cWidth=${column#"$cName:"}
        local cNameLen=${#cName}
        local spacingLeft=$[($cWidth-$cNameLen)/2]
        local spacingRight=$[$cWidth-$spacingLeft-$cNameLen]
        
        repeat " " $spacingLeft
        echo -n "$cName"
        repeat " " $spacingRight
        echo -n "|"
        
        cindex=$[cindex+1]
    done
    echo
    
    repeat "-" $tWidth
    echo
}

function printTableRow {
    local cCount=$#

    echo -n "|"
    local cIndex=0
    for column in "$@"
    do
        local colLen=${#column}
        local revColumn=`echo "$column" | rev`
        local index=$[$colLen-`expr index "$revColumn" ":"`]
        local cValue=${column:0:$index}
        local cWidth=${column:$[index+1]}
        local cValueLen=`strLen "$cValue"`
        echo -ne " $cValue"
        local spacing=$[$cWidth-$cValueLen-2]
        repeat " " $spacing
        cIndex=$[cIndex+1]
        echo -n "|"
    done
    echo
}

function printTableFooter {
    repeat "-" $1
    echo 
}

function repeat {
    local char=$1
    local count=$2

    while [ $count -gt 0 ]
    do
        echo -n "$char"
        count=$[$count - 1]
    done
}

function writeOutput {
    echo -e "$Indent$1"
}

function writeStatus {
    [ $Silent -eq 0 ] && echo -e "$Indent$1"
}

function writeHeader {
    if [ $Silent -eq 0 ]
    then
        echo -e "$Indent$1"
        Indent="$Indent\t"
    fi
}

function writeFooter {
    if [ $Silent -eq 0 ] 
    then
        Indent=${Indent%"\t"}
        echo -e "$Indent$1"
    fi
}

function writeError {
    echo -e `colorText "${Indent}ERROR: $1" "$ERROR_COLOR"` 1>&2
}

function writeWarning {
    echo -e `colorText "${Indent}WARNING: $1" "$WARNING_COLOR"`
}

function writeInput {
    echo -en `colorText "${Indent}INPUT: $1" "$INPUT_COLOR"`
}

function getCharAt {
    local string=$1
    local pos=$2
    echo "${string:pos:1}"
}

function colorCodeDiff {
    local string=$1
    local pattern=$2
    local stringLen=${#string}
    local patternLen=${#pattern}
    local result=""
    local i=0
    while [ $i -lt $stringLen ]
    do
        local stringChar=`getCharAt "$string" "$i"`
        local patternChar=`getCharAt "$pattern" "$i"`
        local highlightedChar=""

        if [ "$stringChar" == "$patternChar" ]
        then
            highlightedChar=`colorText "$stringChar" "green"`
            result="$result$highlightedChar"
        else
            highlightedChar=`colorText "$stringChar" "red"`
            result="$result$highlightedChar"
        fi
        
        i=$[i+1]
    done
    
    if [ $i -lt $patternLen ]
    then
        result="$result\E[31m"
        while [ $i -lt $patternLen ]
        do
            result="$result"_
            i=$[i+1]
        done
    fi
    
    result="$result\E[30m"
    echo $result
}

function getCustomIncludes {
    local regex='#include \"([a-zA-Z0-9_-]+\.h)\"'
    local includes=""
    
    for file in $@
    do
        #echo $file
        while read line
        do
            #echo "   $line"
            if [[ "$line" =~ $regex ]]
            then
                local include=${BASH_REMATCH[1],,}
                includes=${includes/"$include "/}
                includes="$includes$include "
            fi
        done < $file
    done
    
    echo ${includes#" "}
}

function getDependencies {
    local sourceFile="$1"
    local oFile=${sourceFile/".c"/".o"}
    local includes=`getCustomIncludes $sourceFile`
    
    local dependencies="$oFile: $includes $sourceFile"
    echo "$dependencies"  
}

function getProjectName {
    #writeHeader "GET PROJECT NAME: Getting project name"
    
    if [ $# -eq 1 ]
    then
        ProjectName=$@
    elif [ $# -lt 1 ]
    then
        writeInput "No project name specified. Please specify one: "
        read ProjectName
    else
        writeWarning "Too many project names! Only the first one (\"$1\") will be used."
        ProjectName=$1
    fi
    
    #writeStatus "Using project name: $ProjectName"
    
    ExecutableFile=$ProjectName
    ObjectFile=$ProjectName.o
    SourceFile=$ProjectName.c
    HeaderFile=$ProjectName.h
    TestFile=$ProjectName.t
    DebugFile=$ProjectName.d
    ScreenshotFile=$ProjectName.png
    TextOutputFile=$ProjectName.txt
    MakeFile=$ProjectName.m
    
    #writeFooter "GET PROJECT NAME: Completed"
}

function getProjectNames {
    #writeHeader "GET PROJECT NAMES: Getting project names"
    
    SourceFileNames=""
    
    if [ $# -gt 0 ] 
    then
        ProjectNames=$@
        for projectName in $ProjectNames
        do
            SourceFileNames="$SourceFileNames$projectName.c "
        done
        SourceFileNames=${SourceFileNames#" "}
        writeStatus "The following projects will be used: $ProjectNames"
    else
        writeStatus "Automatically searching for valid source files..."
        for sourceFile in *.c
        do
            [ -f ${sourceFile%.c}.t ] && SourceFileNames="$SourceFileNames$sourceFile "
        done
        ProjectNames=${SourceFileNames//.c}
        
        if [ "$ProjectNames" == "" ]
        then
            writeError "No valid source files found!"
            exit
        fi
    
        writeStatus "Search successfully completed, the following projects where found: $ProjectNames"
    fi
    
    #writeFooter "GET PROJECT NAMES: Completed"
}

function create {
    writeHeader "CREATE: Creating necessarys files"
    
    local options=$@
    local library=0
    local open=0

    set -- $options
    while getopts "$AvailableOptions" option
    do
        case "$option" in
            "l") library=1;;
            "o") open=1;;
        esac
    done
    OPTIND=1
    
    if [ -f $SourceFile ]
    then
        writeInput "File already exists. Do you want to override it? [y/N] "
        read input
        
        if [ "$input" != "y" ]
        then
            exit
        fi
    fi
    
    if [ $library -eq 0 ]
    then
        local date=`date +$DATE_FORMAT`
        
        local header_left="/* $SourceFile:"
        local header_right="$CREATOR, $date */"
            
        local hllen=$[`echo "$header_left" | wc -c`-1]
        local hrlen=$[`echo "$header_right" | wc -c`-1]
        local space=$[$HEADER_WIDTH-$hrlen-$hllen]

        writeHeader "PROJECT: Creating project files for project \"$ProjectName\"..."
        
        writeStatus "Creating source file \"$SourceFile\"..."
        touch $SourceFile
        
        # First header line (top border)
        echo -n "/" > $SourceFile
        repeat "*" $[$HEADER_WIDTH-2] >> $SourceFile
        echo "/" >> $SourceFile 
        
        # Second header line (title)
        echo -n "$header_left" >> $SourceFile
        repeat " " $space >> $SourceFile
        echo "$header_right" >> $SourceFile
        
        # Third header line (separator)
        echo -n "/* " >> $SourceFile
        repeat $HEADER_UNDERLINE_CHAR $[$HEADER_WIDTH-6] >> $SourceFile
        echo " */" >> $SourceFile
        
        # Comment header lines    
        for (( c=1; c<=$HEADER_COMMENT_LINES; c++ ))
        do
            echo -n "/*" >> $SourceFile
            repeat " " $[$HEADER_WIDTH-4] >> $SourceFile
            echo "*/" >> $SourceFile
        done
        
        # Last header line (bottom border)
        echo -n "/" >> $SourceFile
        repeat "*" $[$HEADER_WIDTH-2] >> $SourceFile
        echo -e "/\n" >> $SourceFile 
        
        # Includes
        for include in $INCLUDES
        do
            if [ `getCharAt $include 0` == "<" ] 
            then
                echo -e "#include $include" >> $SourceFile
            else
                echo -e "#include \"$include\"" >> $SourceFile
            fi
            
        done
        
        if [ $INCLUDE_BOOL_DEF -eq 1 ]
        then
            # Boolean def
            echo -e "\ntypedef enum bool { false, true } bool;" >> $SourceFile
        fi
        
        # Empty main function
        echo -e "\nint main(int argc, char *argv[])" >> $SourceFile
        echo "{" >> $SourceFile
        
        echo -e "    return 0;" >> $SourceFile
        echo "}" >> $SourceFile
        writeStatus "Source file successfully created!\n"
        
        writeStatus "Creating test case file \"$TestFile\"..."
        touch $TestFile
        echo "# Tests for \"$SourceFile\"" > $TestFile
        echo "<Test input> ; <Expected output>" >> $TestFile
        writeStatus "Test case file successfully created!"

        writeFooter "PROJECT: Project file creation successfully completed!"
    else
        writeHeader "LIBRARY: Creating files for library \"$ProjectName\"..."
        
        writeStatus "Creating header file \"$HeaderFile\"..."
        touch $HeaderFile
        echo -n "" > $HeaderFile
        
        echo "#ifndef Module_h" >> $HeaderFile
        echo "#define Module_h" >> $HeaderFile
        echo "" >> $HeaderFile
        echo "/* 1. standard headers */" >> $HeaderFile
        echo "" >> $HeaderFile
        echo "/* 2. user-def. headers */" >> $HeaderFile
        echo "" >> $HeaderFile
        echo "/* 3. global macros */" >> $HeaderFile
        echo "" >> $HeaderFile
        echo "/* 4. global type declarations */" >> $HeaderFile
        echo "" >> $HeaderFile
        echo "/* 5. global variable declarions */" >> $HeaderFile
        echo "" >> $HeaderFile
        echo "/* 6. global function declarations */" >> $HeaderFile
        echo "" >> $HeaderFile
        echo "#endif" >> $HeaderFile
        
        writeStatus "Header file successfully created!\n"
        
        writeStatus "Creating source file \"$SourceFile\"..."
        touch $SourceFile
        echo -n "" > $SourceFile
        
        echo "/* 1. standard headers */" >> $SourceFile
        echo "" >> $SourceFile
        echo "/* 2. user-def. headers */" >> $SourceFile
        echo "" >> $SourceFile
        echo "/* 3. own header */" >> $SourceFile
        echo "#include \"$HeaderFile\"" >> $SourceFile
        echo "/* 4. local macros */" >> $SourceFile
        echo "#include \"$HeaderFile\"" >> $SourceFile
        echo "/* 5. local type declarations */" >> $SourceFile
        echo "#include \"$HeaderFile\"" >> $SourceFile
        echo "/* 6. global variable definitions */" >> $SourceFile
        echo "#include \"$HeaderFile\"" >> $SourceFile
        echo "/* 7. local variable definitions */" >> $SourceFile
        echo "#include \"$HeaderFile\"" >> $SourceFile
        echo "/* 8. local function definitions */" >> $SourceFile
        echo "#include \"$HeaderFile\"" >> $SourceFile
        echo "/* 9. global function definitions */" >> $SourceFile
        echo "#include \"$HeaderFile\"" >> $SourceFile

        writeStatus "Source file successfully created!"
        
        writeFooter "LIBRARY: Library file creation successfully completed!"
    fi
    
    if [ $open -eq 1 ] 
    then
        open $options
    fi
    
    writeFooter "CREATE: Completed!"
}

function open {
    writeHeader "OPEN: Opening files"
    
    local options=$@
    local newInstance=0
    local library=0

    set -- $options
    while getopts "$AvailableOptions" option
    do
        case "$option" in
            "i") newInstance=1;;
            "o") open=1;;
            "l") library=1;;
        esac
    done
    OPTIND=1
    
    if [ $library -eq 0 ]
    then
        if [ -f $SourceFile -a -f $TestFile ]
        then
            writeStatus "Opening source and test files in geany..."
            [ $newInstance -eq 1 ] && gargs="-i"
            geany $gargs $TestFile $SourceFile &
            writeStatus "Files successfully opened!" 
        else
            writeError "At least one file could not be found!"
            exit 2
        fi
    else
        if [ -f $SourceFile -a -f $HeaderFile ]
        then
            writeStatus "Opening source and header files in geany..."
            [ $newInstance -eq 1 ] && gargs="-i"
            geany $gargs $HeaderFile $SourceFile &
            writeStatus "Files successfully opened!" 
        else
            writeError "At least one file could not be found!"
            exit 2
        fi
    fi

    writeFooter "OPEN: Completed!"
}

function compile {
    writeHeader "COMPILE: Compiling program"
    
    if [ $GCC -eq 1 ] # Compile with gcc
    then
        writeHeader "GCC: Compiling with gcc"
        
        local includes=`getCustomIncludes $SourceFile`
        includes=${includes//".h"/".c"}
        includes=${includes//"$SourceFile"/}
        
        writeHeader "Compiling \"$SourceFile\" with gcc..."
        gcc -lm $GCC_ARGS -o $ExecutableFile $SourceFile $includes &> gcc_output
        local compileResult=$?
        
        while read line
        do
            echo -e "$Indent$line"
        done < gcc_output
        rm gcc_output
        
        if [ $compileResult -ne 0 ]
        then
            writeError "Compile failed!"
            exit 1
        fi
        writeFooter "Compile successfully completed!"
        
        writeFooter "GCC: Completed!"
    else # Compile with make
        writeHeader "MAKE: Compiling with make!"
    
        writeStatus "Generating makefile \"$MakeFile\"..."
    
        local includes=`getCustomIncludes $SourceFile`
        local oFiles=${includes//".h"/".o"}
        oFiles="$ObjectFile $oFiles"
        
        touch $MakeFile
        echo "CC      = gcc" > $MakeFile
        echo "CCFLAGS = $GCC_ARGS" >> $MakeFile
        echo "LD      = gcc" >> $MakeFile
        echo "LDFLAGS = -lm" >> $MakeFile
        echo >> $MakeFile
        echo "all: $ProjectName" >> $MakeFile
        echo >> $MakeFile
        echo "OFILES = $oFiles" >> $MakeFile
        echo >> $MakeFile
        echo ".c.o:" >> $MakeFile
        echo -e '\t$(CC) $(CCFLAGS) -c $<' >> $MakeFile
        echo >> $MakeFile
        echo "$ProjectName: " '$(OFILES)' >> $MakeFile
        echo -e '\t$(LD) -o $@ $(OFILES) $(LDFLAGS)' >> $MakeFile
        echo >> $MakeFile
        echo "clean:" >> $MakeFile
        echo -e '\trm -f $(OFILES)' >> $MakeFile
        echo >> $MakeFile
        echo "# dependencies" >> $MakeFile
        getDependencies $SourceFile >> $MakeFile
        
        local cFiles=${includes//".h"/".c"}
        for cFile in $cFiles
        do
            getDependencies $cFile >> $MakeFile
        done

        writeStatus "Makefile successfully generated!"
        writeHeader "Executing makefile..."
        [ $Silent -eq 1 ] && local silentSwitch="-s"
        
        
        make $silentSwitch -f $MakeFile &> make_output
        local makeResult=$?
        
        while read line
        do
            echo -e "$Indent$line"
        done < make_output
        rm make_output

        if [ $makeResult -ne 0 ]
        then
            writeError "Make failed!"
            rm $MakeFile
            exit 1
        fi
        writeFooter "Makefile successfully executed!"
        
        writeFooter "MAKE: Completed!"
    fi
    
    writeFooter "COMPILE: Completed!"
}

function run {
    writeHeader "RUN: Running program"
    
    local options=$@
    local arguments=""
    
    set -- $options
    while getopts "$AvailableOptions" option
    do
        case "$option" in
            "r") arguments=${options//"-r "/};;
        esac
    done
    OPTIND=1
    if [ "$arguments" == "" ]
    then
        writeInput "Please enter the arguments you want to give to your program: "
        read arguments
    fi
    
    writeHeader "Running \"$ExecutableFile\" with \"$arguments\"..."
    ./$ExecutableFile $arguments &> program_output
    
    local lineCount=$(wc -l program_output | awk '{print $1}')
    echo >> program_output
    local lineNr=0
    while read line
    do
        [ $lineNr -lt $lineCount -o ${#line} -gt 0 ] && echo -e "$Indent$line"
        lineNr=$[$lineNr+1]
    done < program_output
    rm program_output
    
    writeFooter "End of program!"
    
    writeFooter "RUN: Completed!"
}

function test {
    writeHeader "TEST: Running test cases defined in \"$TestFile\""
    
    local options=$@
    local nr=1

    while read line 
    do
        local input=""
        local output=""
        local expected=""

        local commentIndex=`expr index "$line" "#"`
        [ $commentIndex -eq 1 ] && continue
        
        local sepIndex=`expr index "$line" ";"`
        
        if [ $sepIndex -gt 0 ]
        then
            input=${line:0:sepIndex-2}
            expected=${line:sepIndex+1}
        else
            input=$line
        fi
        
        [ $nr -gt 1 ] && echo
        writeOutput "Testcase $nr: ./$ExecutableFile $input"
        Indent="$Indent\t"
        ./$ExecutableFile $input &> program_output
        
        local lineCount=$(wc -l program_output | awk '{print $1}')
        echo >> program_output
        local lineNr=0
        while read line
        do
            [ $lineNr -lt $lineCount -o ${#line} -gt 0 ] && echo -e "$Indent$line"
            lineNr=$[$lineNr+1]
        done < program_output
        rm program_output
        
        Indent=${Indent%"\t"}
        # writeFooter Testcase $nr: Completed!"

        nr=$[$nr + 1]
        
        sleep 0.1
    done < $TestFile
    
    writeFooter "TEST: Completed!"
}

function unittest {
    writeHeader "UNIT: Running test cases with expected output"
    
    local options=$@
    
    local arrayIndex=0
    
    local maxInput=0
    local maxExpected=0
    local maxOutput=0
    
    local cntSuccess=0
    local cntError=0
    
    while read line
    do
        local input=""
        local output=""
        local expected=""
        local result=""
    
        local commentIndex=`expr index "$line" "#"`
        [ $commentIndex -eq 1 ] && continue
        
        local sepIndex=`expr index "$line" ";"`
        
        if [ $sepIndex -gt 0 ]
        then
            input=${line:0:sepIndex-2}
            expected=${line:sepIndex+1}
        else
            continue
        fi
        
        output=`./$ExecutableFile $input`
        
        output=`removeSurroundingSpaces "$output"`
        expected=`removeSurroundingSpaces "$expected"`
        
        if [ "$output" == "$expected" ]
        then
            result=`colorText "O" "green"`
            cntSuccess=$[$cntSuccess+1]
        else
            result=`colorText "X" "red"`
            cntError=$[$cntError+1]
        fi
        
        local len=${#input}
        [ $len -gt $maxInput ] && maxInput=$len
        
        len=${#expected}
        [ $len -gt $maxExpected ] && maxExpected=$len
        
        len=${#output}
        [ $len -gt $maxOutput ] && maxOutput=$len
        
        tests[$arrayIndex]=$input; arrayIndex=$[$arrayIndex+1]
        tests[$arrayIndex]=$expected; arrayIndex=$[$arrayIndex+1]
        tests[$arrayIndex]=$output; arrayIndex=$[$arrayIndex+1]
        tests[$arrayIndex]=$result; arrayIndex=$[$arrayIndex+1]
    done < $TestFile
    
    local colNrTitle="Nr"
    local colInputTitle="Input"
    local colOutputTitle="Output"
    local colExpectedTitle="Expected"
    
    local colNrMinWidth=$[${#colNrTitle}+2]
    local colInputMinWidth=$[${#colInputTitle}+2]
    local colOutputMinWidth=$[${#colOutputTitle}+2]
    local colExpectedMinWidth=$[${#colExpectedTitle}+2]
    
    local colNrWidth=4
    local colInputWidth=$[$maxInput+2]
    local colOutputWidth=$[$maxExpected+2]
    local colExpectedWidth=$[$maxExpected+2]
    #local colResultWidth=3
    
    [ $colInputWidth -lt $colInputMinWidth ] && colInputWidth=$colInputMinWidth
    [ $colOutputWidth -lt $colOutputMinWidth ] && colOutputWidth=$colOutputMinWidth
    [ $colExpectedWidth -lt $colExpectedMinWidth ] && colExpectedWidth=$colExpectedMinWidth
    
    local tableWidth=$[$colNrWidth+$colInputWidth+$colOutputWidth+$colExpectedWidth+5]

    printTableHeader "$colNrTitle:$colNrWidth" "$colInputTitle:$colInputWidth" "$colExpectedTitle:$colExpectedWidth" "$colOutputTitle:$colOutputWidth" 
        
    local testIndex=0
    while [ $testIndex -lt ${#tests[@]} ]
    do
        local testNr=$[($testIndex/4)+1]
        local input=${tests[$testIndex]}
        local expected=${tests[$[$testIndex+1]]}
        local output=${tests[$[$testIndex+2]]}
        #local result=${tests[$[$testIndex+3]]}
        
        output=`colorCodeDiff "$output" "$expected"`
        
        printTableRow "$testNr:$colNrWidth" "$input:$colInputWidth" "$expected:$colExpectedWidth" "$output:$colOutputWidth"
        
        testIndex=$[$testIndex+4]
    done
    
    printTableFooter $tableWidth
    
    writeStatus "Tests completed ($cntSuccess successful, $cntError failed)!"
    
    writeFooter "UNIT: Completed!"
}

function print {
    writeHeader "PRINT: Writing test outputs to file \"$TextOutputFile\""
    
    local options=$@
    
    coderu test -s $ProjectName > $TextOutputFile
    
    writeFooter "PRINT: Completed!"
}

function photo {
    writeHeader "PHOTO: Take screenshots of the test runs and save in \"$ScreenshotFile\""
    
    local options=$@
    
    [ -d $SCREENSHOT_DIR ] || mkdir $SCREENSHOT_DIR
    gnome-terminal --hide-menubar -t ss$ProjectName -x bash -c "coderu test -s $ProjectName; import -window ss$ProjectName $SCREENSHOT_DIR/$ScreenshotFile" 
    
    writeFooter "PHOTO: Completed!"
}

function zipSources {
    writeHeader "ZIP: Adding files to a zip archive"
    
    local options=$@
    local exnr=0
    
    set -- $options
    while getopts "$AvailableOptions" option
    do
        case "$option" in
            "n") exnr=$OPTARG;;
        esac
    done
    OPTIND=1
    
    if [ $exnr -eq 0 ]
    then
        writeStatus "Trying to get exercise number from path name..."
        local exnr=`expr match $PWD '.*\([0-9][0-9]\)'`
        
        if [ "$exnr" == "" ] 
        then
            writeInput "No valid exercise number found. Please enter manually: "
            read exnr
        fi
    fi
    
    writeHeader "Creating zip file of selected source files..."
    [ -d $ZIP_DIR ] || mkdir $ZIP_DIR
    
    local zipname="$LAST_NAME.$FIRST_NAME.$exnr.zip"
    local includedHeaders=`getCustomIncludes $SourceFileNames`
    local headerSources=""
    
    for headerFile in $includedHeaders
    do
        local sourceFile=${headerFile%".h"}.c
        [ -f $sourceFile ] && headerSources="$headerSources$sourceFile "
    done
    
    [ -f $zipname ] && rm $zipname
    zip $ZIP_DIR/$zipname $SourceFileNames $includedHeaders $headerSources &> zip_output
    
    while read line
    do
        writeOutput "$line"
    done < zip_output
    rm zip_output
    
    writeFooter "Zip file \"$zipname\" successfully created!"
    
    writeFooter "ZIP: Completed!"
}

function finish {
    writeHeader "FINISH: Finishing project"
    
    options=$@
    
    writeHeader "Compiling projects..."
    for projectName in $ProjectNames
    do
        getProjectName $projectName
        compile $options
    done
    writeFooter "Compilation successfully completed!"

    writeHeader "Taking screenshots of all found programs..."
    for projectName in $ProjectNames 
    do
        getProjectName $projectName
        photo $options
        #pid=$!
        #wait $pid
    done
    writeFooter "Screenshots successfully taken!"

    writeHeader "Running test cases and writing output to file..."
    for projectName in $ProjectNames
    do
        getProjectName $projectName
        print $options
    done
    writeFooter "Test case output writing successful!"
    
    writeHeader "Adding sources to zip archive..."
    zipSources $options
    writeFooter "Zip archive successfully created!"
    
    writeHeader "Formatting source files..."
    [ -d $HIGHLIGHT_DIR ] || mkdir $HIGHLIGHT_DIR
    
    for projectName in $ProjectNames 
    do
        getProjectName $projectName
        highlightSources $options
    done
    writeFooter "Source files successfully formatted!"
    
    writeFooter "FINISH: Completed!"
}

function highlightSources {
    writeHeader "HIGHLIGHT: Highlighting files for project \"$ProjectName\""
     
    options=$@
    
    writeHeader "Highlighting \"$SourceFile\"..."
    highlight $HIGHLIGHT_ARGS -i $SourceFile -O $HIGHLIGHT_DIR $HIGHLIGHT_FORMAT -s $HIGHLIGHT_STYLE
    writeFooter "Highlighting \"$SourceFile\" completed!"
    
    for headerFile in `getCustomIncludes "$SourceFile"`
    do
        writeHeader "Highlighting \"$headerFile\"..."
        highlight $HIGHLIGHT_ARGS -i $headerFile -O $HIGHLIGHT_DIR $HIGHLIGHT_FORMAT -s $HIGHLIGHT_STYLE
        writeFooter "Highlighting \"$headerFile\" completed!"
        
        sourceFile=${headerFile%".h"}.c
        if [ -f $sourceFile ]
        then
            writeHeader "Highlighting \"$sourceFile\"..."
            highlight $HIGHLIGHT_ARGS -i $sourceFile -O $HIGHLIGHT_DIR $HIGHLIGHT_FORMAT -s $HIGHLIGHT_STYLE
            writeFooter "Highlighting \"$sourceFile\" completed!"
        fi
    done
    
    writeFooter "HIGHLIGHT: Completed!"
}

function main {
    # Actions
    #  * create [-l] [-o [-i]]
    #  * compile
    #  * run [-r [<arguments>]]
    #  * finish [-n <exercisenr>]
    #  * zip [-n <exercisenr>]
    #  * highlight
    #  * print
    #  * photo
    #  * unit (disabled temporarily)
    #  * test
    #  * open [-i]

    # Options
    #  * -s : silent [global]
    #  * -c : colorblind mode [global]
    #  * -g : use gcc instead of make [global]
    #  * -l : library (<projectname>.c, <projectname>.h)
    #  * -o : open
    #  * -i : open in new instance
    #  * -r : arguments
    #  * -t : text output
    #  * -p : photo output
    #  * -z : zip
    #  * -h : highlight
    #  * -n : exercise number (used to name zip file)

    # Settings
    #  * FIRST_NAME
    #  * LAST_NAME
    #  * CREATOR
    #  * DATE_FORMAT
    #  * HEADER_WIDTH
    #  * HEADER_COMMENT_LINES
    #  * HEADER_UNDERLINE_CHAR
    #  * SCREENSHOT_DIR
    #  * SCREENSHOT_WAITTIME
    #  * HIGHLIGHT_FORMAT
    #  * HIGHLIGHT_STYLE
    #  * HIGHLIGHT_DIR
    #  * GCC_ARGS
    #  * INCLUDE_BOOL_DEF
    #  * INCLUDES
    #  * ZIP_DIR
    
    AvailableOptions="scgloir:tpzhn:"

    Silent=0
    Colorblind=0
    GCC=0
    Indent=""
    local action=""
    local options=""

    local args=`getopt "$AvailableOptions" "$@"`
    local regex='[ ]?(.*)-- ([a-zA-Z]+)[ ]?(.*)?'

    if [[ "$args" =~ $regex ]]
    then
        options="${BASH_REMATCH[1]}"
        action="${BASH_REMATCH[2]}"
        names="${BASH_REMATCH[3]}"
    fi
    
    #echo ".$action.$options.$names."
    
    set -- $options
    while getopts "$AvailableOptions" option
    do
        case "$option" in
            "s") Silent=1;;
            "c") Colorblind=1;;
            "g") GCC=1;;
        esac
    done
    OPTIND=1

    local multifile=0
    case "$action" in
        "finish") multifile=1;;
        "zip")    multifile=1;;
    esac

    local skipCompile=0
    case "$action" in
        "create") skipCompile=1;;
        "open")   skipCompile=1;;
        "finish") skipCompile=1;;
        "zip")    skipCompile=1;;
    esac
    
    if [ "$names" == "" ]
    then
        case "$action" in
            "create") ;;
            "open") ;;
            "run") ;;
            "test") ;;
            #"unit") ;;
            "print") ;;
            "photo") ;;
            "finish") ;;
            "zip") ;;
            "highlight") ;;
            *) names="$action"; action="run";;
        esac
    fi

    if [ $multifile -eq 1 ]
    then
        getProjectNames $names
    else
        getProjectName $names
    fi

    if [ $skipCompile -eq 0 ]
    then
        compile $options
    fi

    case "$action" in
        "create")    create $options;;
        "open")      open $options;;
        "run")       run $options;;
        "test")      test $options;;
        #"unit")      unittest $options;;
        "print")     print $options;;
        "photo")     photo $options;;
        "finish")    finish $options;;
        "zip")       zipSources $options;;
        "highlight") highlightSources $options;;
    esac
}

main "$@"
